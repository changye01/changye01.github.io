<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo &amp; GitAction自动部署GitPages</title>
    <url>/2022/04/18/github-pages/</url>
    <content><![CDATA[<p>在本教程中，我们使用<a href="https://docs.github.com/en/actions">GitHub Actions</a>来部署 GitHub Pages。它适用于公共和私有存储库。如果不想将源文件夹上传到 GitHub，请跳至<a href="https://hexo.io/docs/github-pages#One-command-deployment">单命令部署部分。</a></p>
<span id="more"></span>

<h1 id="通过分支部署"><a href="#通过分支部署" class="headerlink" title="通过分支部署"></a>通过分支部署</h1><ol>
<li>创建一个名为<code>username.github.io</code>的 repo ，其中 username 是您在 GitHub 上的用户名。如果您已经上传到其他 repo，请重命名 repo。</li>
<li>将 Hexo 文件夹中的文件推送到存储库的默认分支。默认分支通常是<strong>main</strong>，较旧的存储库可能使用<strong>master</strong>分支。<ul>
<li>将<code>main</code>分支推送到 GitHub：<br> $ git push -u 起源主</li>
</ul>
</li>
</ol>
<ul>
<li>默认情况下不（也不应该）上传该<code>public/</code>文件夹，请确保该<code>.gitignore</code>文件包含<code>public/</code>行。文件夹结构应该与<a href="https://github.com/hexojs/hexo-starter">这个 repo</a>大致相似，没有<code>.gitmodules</code>文件。</li>
</ul>
<ol start="3">
<li>检查您在本地计算机上使用的 Node.js 版本，使用<code>node --version</code>. 记下主要版本（例如，<code>v16.y.z</code>）</li>
<li><code>.github/workflows/pages.yml</code>使用以下内容在您的存储库中创建（替换<code>16</code>为您在上一步中记下的 Node.js 的主要版本）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: Pages  </span><br><span class="line">  </span><br><span class="line">on:  </span><br><span class="line">  push:  </span><br><span class="line">    branches:  </span><br><span class="line">      - main  # default branch  </span><br><span class="line">  </span><br><span class="line">jobs:  </span><br><span class="line">  pages:  </span><br><span class="line">    runs-on: ubuntu-latest  </span><br><span class="line">    steps:  </span><br><span class="line">      - uses: actions/checkout@v2  </span><br><span class="line">      - name: Use Node.js 16.x  </span><br><span class="line">        uses: actions/setup-node@v2  </span><br><span class="line">        with:  </span><br><span class="line">          node-version: &#x27;16&#x27;  </span><br><span class="line">      - name: Cache NPM dependencies  </span><br><span class="line">        uses: actions/cache@v2  </span><br><span class="line">        with:  </span><br><span class="line">          path: node_modules  </span><br><span class="line">          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache  </span><br><span class="line">          restore-keys: |  </span><br><span class="line">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache  </span><br><span class="line">      - name: Install Dependencies  </span><br><span class="line">        run: npm install  </span><br><span class="line">      - name: Build  </span><br><span class="line">        run: npm run build  </span><br><span class="line">      - name: Deploy  </span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3  </span><br><span class="line">        with:  </span><br><span class="line">          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;  </span><br><span class="line">          publish_dir: ./public</span><br></pre></td></tr></table></figure></li>
<li>部署完成后，可以在<code>gh-pages</code>存储库的分支中找到生成的页面。</li>
<li>在 GitHub 存储库的设置中，导航到<strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong>。将分支更改为<code>gh-pages</code>并保存。</li>
<li>检查_用户名_.github.io 的网页。</li>
</ol>
<h1 id="project-page"><a href="#project-page" class="headerlink" title="project page"></a>project page</h1><p>如果你更喜欢在 GitHub 上有一个项目页面：</p>
<ol>
<li>导航到 GitHub 上的存储库。转到<strong>设置</strong>选项卡。更改<strong>存储库名称</strong>，以便您的博客在<code>username.github.io/repository</code>可用, <strong>存储库</strong>可以是任何名称，例如_blog_或_hexo_。</li>
<li>编辑您的<code>_config.yml</code>，将<code>url:</code>值更改为<code>https:// _username_.github.io/_repository</code>。</li>
<li>提交并推送到默认分支。</li>
<li>部署完成后，可以在<code>gh-pages</code>存储库的分支中找到生成的页面。</li>
<li>在 GitHub 存储库的设置中，导航到<code>Settings&gt; Pages &gt; Source</code>。将分支更改为<code>gh-pages</code>并保存。</li>
<li>检查<code>_用户名_.github.io/_repository_</code>的网页。</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>deploy</tag>
        <tag>hexo</tag>
        <tag>git_action</tag>
        <tag>github_page</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 查看端口占用</title>
    <url>/2022/04/21/linux_command/</url>
    <content><![CDATA[<p>在linux下开发时，你的软件可能要使用某一个端口，或者想查找某一个端口是否被占用。需要怎么做呢？</p>
<span id="more"></span>
<p>lsof是一个非常强大的linux工具，她被用来查找哪些程序使用了那些文件。在linux系统下，基本上所有的东西都可以被当作文件来用。socket当然也是一种文件了。所以lsof可以用来查找谁用了某一个端口。具体方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i :port_number |grep <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>-i</code>是用来查找和网络相关的文件，<code>:</code>号是必须的，它是标志你查找的是一个端口。port_number就是你要查找的端口号，譬如你要查找是否有程序占用了oracle的监听端口1521,就可以使用<code>lsof -i :1521 ｜grep &quot;&quot;</code>。如果有程序已经占用了，那么下面打印的第二个字段就是该程序的进程id，第一个字段是进程的名字。</p>
<p>如果只有<code>losf -i :port_number</code>可能会查到很多应用程序，但这些程序实际并没有占用你指定的端口，这些端口只是连接到本机器或者别的机器的该端口。所以要<code>grep &quot;&quot;</code>，因为一个端口只可能被一个程序占用的</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>port</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian 社区插件无法下载</title>
    <url>/2022/04/21/obsidian_no_community/</url>
    <content><![CDATA[<p>因为某些原因，在国内经常无法下载 Obsidian 的社区插件。</p>
<span id="more"></span>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>下载 <a href="https://gitee.com/juqkai/obsidian-proxy-github/releases">obsidian-proxy-github.zip</a></li>
<li>解压 obsidian-proxy-github.zip</li>
<li>将解压的文件夹放入笔记目录下的插件目录内。如：XXX&#x2F;.obsidian&#x2F;plugins</li>
<li>重启obsidian</li>
</ol>
]]></content>
      <categories>
        <category>obsidian</category>
      </categories>
      <tags>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh登录时在参数中加入密码的解决方案</title>
    <url>/2022/04/21/sshpass/</url>
    <content><![CDATA[<p>在使用ssh登录远程服务器的时候，在执行完ssh user@ip后，要输入登录密码，有时候登录密码记不住，这样带来的很多的麻烦，有没有一种在ssh的参数中直接加入密码的方法呢？</p>
<span id="more"></span>
<p>查看ssh的帮助我们发现ssh命令并不能在参数中指定密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usage: ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]</span><br><span class="line">           [-D [bind_address:]port] [-E log_file] [-e escape_char]</span><br><span class="line">           [-F configfile] [-I pkcs11] [-i identity_file] [-L address]</span><br><span class="line">           [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port]</span><br><span class="line">           [-Q query_option] [-R address] [-S ctl_path] [-W host:port]</span><br><span class="line">           [-w local_tun[:remote_tun]] [user@]hostname [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure>

<h2 id="解决方案：sshpass"><a href="#解决方案：sshpass" class="headerlink" title="解决方案：sshpass"></a>解决方案：sshpass</h2><p>sshpass:用于非交互的ssh 密码验证，允许你用 -p 参数指定明文密码，然后直接登录远程服务器。 它支持密码从命令行,文件,环境变量中读取。</p>
<p>首先在机器上安装sshpass<br>对于debian&#x2F;ubuntu系统来说，安装方式很简单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install sshpass</span><br></pre></td></tr></table></figure>
<p>对于其他的linux,可以编译sshpass的源码安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> wget http://sourceforge.net/projects/sshpass/files/sshpass/1.05/sshpass-1.05.tar.gz</span><br><span class="line">tar xvzf sshpass-1.05.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>安装好之后，使用sshpass命令，得到如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: sshpass [-f|-d|-p|-e] [-hV] <span class="built_in">command</span> parameters</span><br><span class="line">   -f filename   Take password to use from file</span><br><span class="line">   -d number     Use number as file descriptor <span class="keyword">for</span> getting password</span><br><span class="line">   -p password   Provide password as argument (security unwise)</span><br><span class="line">   -e            Password is passed as env-var <span class="string">&quot;SSHPASS&quot;</span></span><br><span class="line">   With no parameters - password will be taken from stdin</span><br><span class="line"></span><br><span class="line">   -h            Show <span class="built_in">help</span> (this screen)</span><br><span class="line">   -V            Print version information</span><br><span class="line">At most one of -f, -d, -p or -e should be used</span><br></pre></td></tr></table></figure>
<p>于是把sshpass和ssh命令集合就能实现ssh登录的时候加入密码了，这样把登录某台计算机的命令写成shell脚本，后面就十分的方便了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sshpass -p <span class="string">&quot;XXX&quot;</span> ssh user@IP</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
        <tag>sshpass</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh: no matches found</title>
    <url>/2022/04/21/zsh_no_match/</url>
    <content><![CDATA[<p>如果你使用的是<code>zsh</code> ，那么在你使用 <code>find</code> 进行通配符 <code>*</code> 匹配的时候，会出现 <code>zsh: no matches found</code> 的问题</p>
<span id="more"></span>
<p>这是由于 <code>zsh</code> 导致的，在缺省的情况下，<code>zsh</code> 始终自动解释 <code>*</code> ，传不到给 <code>find</code> 解释<br>解决方案:<br>在 <code>~/.zshrc</code> 中追加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setopt no_nomatch</span><br></pre></td></tr></table></figure>
<p>使修改生效，执行<code>source ~/.zshrc</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
</search>
