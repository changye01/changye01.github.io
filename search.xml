<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo &amp; GitAction自动部署GitPages</title>
    <url>/2022/04/18/github-pages/</url>
    <content><![CDATA[<p>在本教程中，我们使用<a href="https://docs.github.com/en/actions">GitHub Actions</a>来部署 GitHub Pages。它适用于公共和私有存储库。如果不想将源文件夹上传到 GitHub，请跳至<a href="https://hexo.io/docs/github-pages#One-command-deployment">单命令部署部分。</a></p>
<span id="more"></span>

<h1 id="通过分支部署"><a href="#通过分支部署" class="headerlink" title="通过分支部署"></a>通过分支部署</h1><ol>
<li>创建一个名为<code>username.github.io</code>的 repo ，其中 username 是您在 GitHub 上的用户名。如果您已经上传到其他 repo，请重命名 repo。</li>
<li>将 Hexo 文件夹中的文件推送到存储库的默认分支。默认分支通常是<strong>main</strong>，较旧的存储库可能使用<strong>master</strong>分支。<ul>
<li>将<code>main</code>分支推送到 GitHub：<br> $ git push -u 起源主</li>
</ul>
</li>
</ol>
<ul>
<li>默认情况下不（也不应该）上传该<code>public/</code>文件夹，请确保该<code>.gitignore</code>文件包含<code>public/</code>行。文件夹结构应该与<a href="https://github.com/hexojs/hexo-starter">这个 repo</a>大致相似，没有<code>.gitmodules</code>文件。</li>
</ul>
<ol start="3">
<li>检查您在本地计算机上使用的 Node.js 版本，使用<code>node --version</code>. 记下主要版本（例如，<code>v16.y.z</code>）</li>
<li><code>.github/workflows/pages.yml</code>使用以下内容在您的存储库中创建（替换<code>16</code>为您在上一步中记下的 Node.js 的主要版本）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name: Pages  </span><br><span class="line">  </span><br><span class="line">on:  </span><br><span class="line">  push:  </span><br><span class="line">    branches:  </span><br><span class="line">      - main  # default branch  </span><br><span class="line">  </span><br><span class="line">jobs:  </span><br><span class="line">  pages:  </span><br><span class="line">    runs-on: ubuntu-latest  </span><br><span class="line">    steps:  </span><br><span class="line">      - uses: actions/checkout@v2  </span><br><span class="line">      - name: Use Node.js 16.x  </span><br><span class="line">        uses: actions/setup-node@v2  </span><br><span class="line">        with:  </span><br><span class="line">          node-version: &#x27;16&#x27;  </span><br><span class="line">      - name: Cache NPM dependencies  </span><br><span class="line">        uses: actions/cache@v2  </span><br><span class="line">        with:  </span><br><span class="line">          path: node_modules  </span><br><span class="line">          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache  </span><br><span class="line">          restore-keys: |  </span><br><span class="line">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache  </span><br><span class="line">      - name: Install Dependencies  </span><br><span class="line">        run: npm install  </span><br><span class="line">      - name: Build  </span><br><span class="line">        run: npm run build  </span><br><span class="line">      - name: Deploy  </span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3  </span><br><span class="line">        with:  </span><br><span class="line">          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;  </span><br><span class="line">          publish_dir: ./public</span><br></pre></td></tr></table></figure></li>
<li>部署完成后，可以在<code>gh-pages</code>存储库的分支中找到生成的页面。</li>
<li>在 GitHub 存储库的设置中，导航到<strong>Settings</strong> &gt; <strong>Pages</strong> &gt; <strong>Source</strong>。将分支更改为<code>gh-pages</code>并保存。</li>
<li>检查_用户名_.github.io 的网页。</li>
</ol>
<h1 id="project-page"><a href="#project-page" class="headerlink" title="project page"></a>project page</h1><p>如果你更喜欢在 GitHub 上有一个项目页面：</p>
<ol>
<li>导航到 GitHub 上的存储库。转到<strong>设置</strong>选项卡。更改<strong>存储库名称</strong>，以便您的博客在<code>username.github.io/repository</code>可用, <strong>存储库</strong>可以是任何名称，例如_blog_或_hexo_。</li>
<li>编辑您的<code>_config.yml</code>，将<code>url:</code>值更改为<code>https:// _username_.github.io/_repository</code>。</li>
<li>提交并推送到默认分支。</li>
<li>部署完成后，可以在<code>gh-pages</code>存储库的分支中找到生成的页面。</li>
<li>在 GitHub 存储库的设置中，导航到<code>Settings&gt; Pages &gt; Source</code>。将分支更改为<code>gh-pages</code>并保存。</li>
<li>检查<code>_用户名_.github.io/_repository_</code>的网页。</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>deploy</tag>
        <tag>hexo</tag>
        <tag>git_action</tag>
        <tag>github_page</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 查看端口占用</title>
    <url>/2022/04/21/linux_command/</url>
    <content><![CDATA[<p>在linux下开发时，你的软件可能要使用某一个端口，或者想查找某一个端口是否被占用。需要怎么做呢？</p>
<span id="more"></span>
<p>lsof是一个非常强大的linux工具，她被用来查找哪些程序使用了那些文件。在linux系统下，基本上所有的东西都可以被当作文件来用。socket当然也是一种文件了。所以lsof可以用来查找谁用了某一个端口。具体方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i :port_number |grep <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>-i</code>是用来查找和网络相关的文件，<code>:</code>号是必须的，它是标志你查找的是一个端口。port_number就是你要查找的端口号，譬如你要查找是否有程序占用了oracle的监听端口1521,就可以使用<code>lsof -i :1521 ｜grep &quot;&quot;</code>。如果有程序已经占用了，那么下面打印的第二个字段就是该程序的进程id，第一个字段是进程的名字。</p>
<p>如果只有<code>losf -i :port_number</code>可能会查到很多应用程序，但这些程序实际并没有占用你指定的端口，这些端口只是连接到本机器或者别的机器的该端口。所以要<code>grep &quot;&quot;</code>，因为一个端口只可能被一个程序占用的</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>port</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian 社区插件无法下载</title>
    <url>/2022/04/21/obsidian_no_community/</url>
    <content><![CDATA[<p>因为某些原因，在国内经常无法下载 Obsidian 的社区插件。</p>
<span id="more"></span>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>下载 <a href="https://gitee.com/juqkai/obsidian-proxy-github/releases">obsidian-proxy-github.zip</a></li>
<li>解压 obsidian-proxy-github.zip</li>
<li>将解压的文件夹放入笔记目录下的插件目录内。如：XXX&#x2F;.obsidian&#x2F;plugins</li>
<li>重启obsidian</li>
</ol>
]]></content>
      <categories>
        <category>obsidian</category>
      </categories>
      <tags>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh登录时在参数中加入密码的解决方案</title>
    <url>/2022/04/21/sshpass/</url>
    <content><![CDATA[<p>在使用ssh登录远程服务器的时候，在执行完ssh user@ip后，要输入登录密码，有时候登录密码记不住，这样带来的很多的麻烦，有没有一种在ssh的参数中直接加入密码的方法呢？</p>
<span id="more"></span>
<p>查看ssh的帮助我们发现ssh命令并不能在参数中指定密码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">usage: ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]</span><br><span class="line">           [-D [bind_address:]port] [-E log_file] [-e escape_char]</span><br><span class="line">           [-F configfile] [-I pkcs11] [-i identity_file] [-L address]</span><br><span class="line">           [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port]</span><br><span class="line">           [-Q query_option] [-R address] [-S ctl_path] [-W host:port]</span><br><span class="line">           [-w local_tun[:remote_tun]] [user@]hostname [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure>

<h2 id="解决方案：sshpass"><a href="#解决方案：sshpass" class="headerlink" title="解决方案：sshpass"></a>解决方案：sshpass</h2><p>sshpass:用于非交互的ssh 密码验证，允许你用 -p 参数指定明文密码，然后直接登录远程服务器。 它支持密码从命令行,文件,环境变量中读取。</p>
<p>首先在机器上安装sshpass<br>对于debian&#x2F;ubuntu系统来说，安装方式很简单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install sshpass</span><br></pre></td></tr></table></figure>
<p>对于其他的linux,可以编译sshpass的源码安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> wget http://sourceforge.net/projects/sshpass/files/sshpass/1.05/sshpass-1.05.tar.gz</span><br><span class="line">tar xvzf sshpass-1.05.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>安装好之后，使用sshpass命令，得到如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: sshpass [-f|-d|-p|-e] [-hV] <span class="built_in">command</span> parameters</span><br><span class="line">   -f filename   Take password to use from file</span><br><span class="line">   -d number     Use number as file descriptor <span class="keyword">for</span> getting password</span><br><span class="line">   -p password   Provide password as argument (security unwise)</span><br><span class="line">   -e            Password is passed as env-var <span class="string">&quot;SSHPASS&quot;</span></span><br><span class="line">   With no parameters - password will be taken from stdin</span><br><span class="line"></span><br><span class="line">   -h            Show <span class="built_in">help</span> (this screen)</span><br><span class="line">   -V            Print version information</span><br><span class="line">At most one of -f, -d, -p or -e should be used</span><br></pre></td></tr></table></figure>
<p>于是把sshpass和ssh命令集合就能实现ssh登录的时候加入密码了，这样把登录某台计算机的命令写成shell脚本，后面就十分的方便了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sshpass -p <span class="string">&quot;XXX&quot;</span> ssh user@IP</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
        <tag>sshpass</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么计算机采用补码而不是原码或反码？</title>
    <url>/2022/04/21/why-complement/</url>
    <content><![CDATA[<p>简单的回答，采用<a href="https://www.zhihu.com/search?q=%E8%A1%A5%E7%A0%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1878359705%7D">补码</a>的根本原因在于简化电路设计的复杂度。</p>
<span id="more"></span>
<p>接下来我会从<strong>根源上</strong>详细讲解下<a href="https://www.zhihu.com/search?q=%E5%8E%9F%E7%A0%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1878359705%7D">原码</a>、反码以及补码产生的来龙去脉。<br>前方高能，坐稳了！<br>先来看一个简单的问题：小孩子都知道数数：1,2,3,4,5,6,7,8,9,10，可为什么要这样数呢？为什么不是1,2,3,4,5,6,10呢？<br>一种比较流行的解释是因为人类有10个手指：<br><img src="/images/Pasted%20image%2020220421162841.png" alt="Pasted image 20220421162841.png"><br>所以人类的数字系统就是10进制的，如果这个解释成立，那么<a href="https://www.zhihu.com/search?q=%E5%8F%98%E8%89%B2%E9%BE%99&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1878359705%7D">变色龙</a>的数字系统应该是4进制<br><img src="/images/Pasted%20image%2020220421162856.png" alt="Pasted image 20220421162856.png"><br>而计算机的手是单指，所以是2进制：<br><img src="/images/Pasted%20image%2020220421162944.png" alt="Pasted image 20220421162944.png"><br>哈哈，开个玩笑，其实计算机在最最最最底层就是一个个开关，因此计算机系统是2进制</p>
<h2 id="数字-0-与正整数"><a href="#数字-0-与正整数" class="headerlink" title="数字 0 与正整数"></a><strong>数字 0 与正整数</strong></h2><p>0这个数字其实有非常重要的意义，可能大家都没想过这个问题，没关系，我们来看两个不同的数字系统：阿拉伯数字和罗马数字：<br><img src="/images/Pasted%20image%2020220421163007.png" alt="Pasted image 20220421163007.png"><br>注意，罗马数字中没有 “0” 这个概念，你可能会想，这有什么大不了的吗？让我们来看一个例子，数字205，分别在两种系统的表示。<br><strong>罗马</strong>：CCV<br><strong>阿拉伯</strong>：205<br>0的出现可以让阿拉伯数字系统中205这样写：<br><img src="/images/Pasted%20image%2020220421163019.png" alt="Pasted image 20220421163019.png"><br>可以看到，在阿拉伯系统中<strong>数值和数字所在的位置有直接关系，这就是<a href="https://www.zhihu.com/search?q=%E8%BF%9B%E4%BD%8D%E5%88%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1878359705%7D">进位制</a><strong>，而在罗马数字系统则没有进位制，这使得罗马数字在表示大数值时非常困难。<br>计算机系统中的二进制同样是进位制，数字5用二进制表示就是101：<br><img src="/images/Pasted%20image%2020220421163041.png" alt="Pasted image 20220421163041.png"><br>使用 k 个bit，那么可以表示 2^k 个整数，范围从 0 到 2^k - 1，假设 k 有 8 位，那么表示范围就是 0 到 255，当然这里说的是无符号正整数。<br>现在我们可以表示正整数了，但真正有用的计算不可避免会涉及到</strong>负数</strong>，也就是<strong>带符号整数</strong>，而这也是真正有趣的地方。</p>
<h2 id="有符号整数"><a href="#有符号整数" class="headerlink" title="有符号整数"></a><strong>有符号整数</strong></h2><p>正整数的表示非常简单，给定 k 个bit，那么我们可以表示 2^k 个数，假设k为4，那么我们可以表示16个数字。<br>如果要考虑有符号整数呢？<br>你可能会想这还不简单，一半一半嘛！其中一半用来表示正数，另一半用来表示负数！<br>假设有4个比特位，如果用来表示无符号正数，就是0 ~ 15，而如果要表示有符号整数，那么其中一半给到+1 ~ +7，另一半给到-1 ~ -7。<br>一切看最左边的 bit 是 0，如果最左边的 bit 位是 0 则表示正数，否则表示负数。<br><img src="/images/Pasted%20image%2020220421163054.png" alt="Pasted image 20220421163054.png"><br>现在我们已经知道正负数是通过什么来决定的了，接下来的问题就是负数该怎么表示呢？也就是说对于比如-2，现在我们只知道其最左边的 bit 位是1，那么右边的这些 bit 到底该是多少呢？<br>关于这一问题就三种设计方法。</p>
<h2 id="方法1：正数加上负号即对应负数"><a href="#方法1：正数加上负号即对应负数" class="headerlink" title="方法1：正数加上负号即对应负数"></a><strong>方法1：正数加上负号即对应负数</strong></h2><p>第一种设计方法很简单，既然<strong>0</strong>010表示+2，那么如果最左边的bit位替换成1就表示对应的负数，即<strong>1</strong>010表示-2，这种设计方法简单直接，这是<strong>最符合人类的思维的设计(不一定最好)<strong>。<br>如果这样设计的话，4个 bit 位能表示的所有数字就是：<br><img src="/images/Pasted%20image%2020220421163104.png" alt="Pasted image 20220421163104.png"><br>你给这种非常符合人类思维的数字表示方法起了个名字，</strong>原码</strong>。<br>这种设计下会有一个奇怪的表示：0000表示0这没什么问题，1000会表示 -0，这会导致出现-0这样的数字，其实 0 和 -0 不应该有什么区别。<br>身为设计天才的你显然不满足于此，是不是还有其它设计方法？</p>
<h2 id="方法2：翻转"><a href="#方法2：翻转" class="headerlink" title="方法2：翻转"></a><strong>方法2：翻转</strong></h2><p>你觉得第一种表示方法也就是原码太原始，可以说基本上没什么设计，你突发奇想，既然<strong>0010</strong>表示+2，那么将其全部翻转，即<strong>1101</strong>来表示-2好了，即：<br><img src="/images/Pasted%20image%2020220421163125.png" alt="Pasted image 20220421163125.png"><br>你给这种表示方法也起了名字，<strong>反码</strong>。<br>在反码表示法下，也存在-0，0000表示0，全部翻转也就是1111来表示-0，可以看到这和原码表示方法差别没那么大。</p>
<h2 id="设计计算机很容易吗？"><a href="#设计计算机很容易吗？" class="headerlink" title="设计计算机很容易吗？"></a><strong>设计计算机很容易吗？</strong></h2><p>到这里有的同学可能会想，计算机设计者其实怎么来表示有符号数其实都是可以的，原码可以，反码也可以，都能表示出来，设计计算机太容易了吧！<br>你猜的没错，就是这么容易！<strong>如果你是计算机的创造者，怎么设计都可以</strong>！最初的计算机设计者真的可以有很多表示数字的方法，<strong>采用反码表示数字的计算机系统在历史上真的出现过！！！</strong>但这些表示方法不约而同都有一个问题，那就是<strong>两数相加</strong>。</p>
<h2 id="不简单的两数相加"><a href="#不简单的两数相加" class="headerlink" title="不简单的两数相加"></a><strong>不简单的两数相加</strong></h2><p>我们以2 + ( -2 )为例。在原码表示法下，2为0010，-2为1010，那么计算机该怎么做2 + ( -2 )加法呢？<br><img src="/images/Pasted%20image%2020220421163135.png" alt="Pasted image 20220421163135.png"><br>可是1100在原码表示法下是 -4，这与原码表示法本身是矛盾的。<br>再来看看反码，2为0010，-2为1101，两数相加：<br><img src="/images/Pasted%20image%2020220421163144.png" alt="Pasted image 20220421163144.png"><br>1111在反码表示下为-0，<strong>虽然-0不够优雅</strong>，但好歹和反码表示法本身没有矛盾，这大概就是为什么早期会有计算机采用反码表示数字的原因。<br>计算机加法是通过加法器组合电路实现的，而这里的不管是原码还是反码，要想计算加法都不可避免的要在前面提到的加法器之上<strong>额外添加组合电路来确保有符号数相加的正确性</strong>，这无疑会增加电路设计的复杂度。<br>顺便说一句，提到<strong>复杂度</strong>这个词博主脑海里第一个跳出来的就是算法，哈哈，想到了面试时被手写算法支配的恐惧，正好在这里也顺便给大家推荐一份个人感觉非常不错的<strong>学习算法刷题绝佳资料吧，除了计算机底层技术，算法不可忽视，如果想进BAT、TMD、快手这样的一线大厂，认认真真过上一遍，这些大厂算法面试一关大部分题目都不在话下</strong>：<br><a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/s/A-HPH3Tkl8KOvZgdRArvIg">Github疯传！阿里P8大佬写的Leetcode刷题笔记，秒杀80%的算法题！mp.weixin.qq.com&#x2F;s&#x2F;A-HPH3Tkl8KOvZgdRArvIg</a><br><img src="/images/Pasted%20image%2020220421163206.png" alt="Pasted image 20220421163206.png"><br>让我们继续CPU这一话题。<br>人是懒惰的也是聪明的，我们就没有一种2+-2就是0(0000)的数字表达方法吗？</p>
<h2 id="新的表示方法"><a href="#新的表示方法" class="headerlink" title="新的表示方法"></a><strong>新的表示方法</strong></h2><p>现在，对于最左边的bit位来说，0表示正数，1表示负数是没有什么异议的，这里的关键在于我们需要一种表示方法，可以让A+(-A) &#x3D; 0，而且这里0的二进制也是0，如果是4个bit为的话就应该是0000。<br>假设A&#x3D;2，那么我们重点研究下2+-2 &#x3D; 0(0000)的表示方法。<br>对于2来说，很简单就是0010，对于-2来说，现在我们只能确定最左边的bit位是1，也就是说 ：<br><img src="/images/Pasted%20image%2020220421163214.png" alt="Pasted image 20220421163214.png"><br><strong>显然 -2 应该用1110来表示，这样2+-2就真的是0了</strong>，由此推断：<br><img src="/images/Pasted%20image%2020220421163222.png" alt="Pasted image 20220421163222.png"><br>从图中可以看出这种表示方法下就没有-0了。<br>注意看-1和0，分别是1111和0000，当我们让-1(1111)加上1(0001)时，我们确实得到了0000，不过还有一个进位，实际上我们得到的是10000，但<strong>我们可以放心的忽略掉该进位</strong>。<br><strong>这种表示方法最美妙的地方在于加法器不用修改就可以直接计算有符号数字的加法</strong>。<br>你可以自己试验几个数字相加就能发下这种表示方法的奇妙之处，你给这种数字表达方法起了名字，<strong>补码，</strong>这现代计算机系统所采用的数字表示方法。<br>采用补码，如果是4个bit位，那么我们可以表示的范围是-8 ~ 7。再来仔细看一下反码和补码：<br><img src="/images/Pasted%20image%2020220421163231.png" alt="Pasted image 20220421163231.png"><br>因为补码不需要表示 -0 这个奇葩，你会发现一个很有意思的规律，那就是<strong>负数的反码加上1就是对应的补码</strong>，这是计算机教科书在讲解补码时很重要的一个知识点，现在你应该知道这个知识点是怎么来的了吧！</p>
<h2 id="CPU真的识数吗？"><a href="#CPU真的识数吗？" class="headerlink" title="CPU真的识数吗？"></a><strong>CPU真的识数吗？</strong></h2><p>就像前面提到的，现代计算机采用补码的根本原因在于<strong>这种表示方法可以简化电路设计</strong>，尽管补码对人类来说不够直观。到这里我们可以看到，在计算机科学中，<strong>最符合人类思维的设计并不一定对计算机最优</strong>，这也是最迷人的地方，人和机器毕竟不同嘛！让我们再来看下采用补码时2+-2 的计算过程：<br><img src="/images/Pasted%20image%2020220421163239.png" alt="Pasted image 20220421163239.png"><br>和十进制加法一样，从右到左，如果产生进位，那么进位就要参与左边一列的计算。<br>注意，在这个过程中加法器关心这个数字是正数还是负数了吗？答案是没有，<strong>加法器或者更具体是CPU中的ALU根本就不关心是正数还是负数，它只知道我要进行加法计算</strong>，除此之外不 CARE 任何其它信息，至于数字该采用反码还是补码这些是人类需要理解的，确切来说是编译器需要来理解的，程序员都无需关心，但<strong>程序员需要知道数据类型的表示范围</strong>。<br>现在你能明白补码以及 CPU 是如何识数的了吧。<br>在本文我们详细讲解了CPU是如何识数这一主题，正如本文所言，<strong>CPU其实本质的上是不识数的，也不需要识数</strong>。<br>转自<a href="https://www.zhihu.com/question/352057791/answer/1878359705">为什么计算机采用补码而不是原码或反码？</a></p>
]]></content>
      <categories>
        <category>computer_compositon</category>
      </categories>
      <tags>
        <tag>computer_compositon</tag>
        <tag>complement</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh: no matches found</title>
    <url>/2022/04/21/zsh_no_match/</url>
    <content><![CDATA[<p>如果你使用的是<code>zsh</code> ，那么在你使用 <code>find</code> 进行通配符 <code>*</code> 匹配的时候，会出现 <code>zsh: no matches found</code> 的问题</p>
<span id="more"></span>
<p>这是由于 <code>zsh</code> 导致的，在缺省的情况下，<code>zsh</code> 始终自动解释 <code>*</code> ，传不到给 <code>find</code> 解释<br>解决方案:<br>在 <code>~/.zshrc</code> 中追加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setopt no_nomatch</span><br></pre></td></tr></table></figure>
<p>使修改生效，执行<code>source ~/.zshrc</code></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
</search>
